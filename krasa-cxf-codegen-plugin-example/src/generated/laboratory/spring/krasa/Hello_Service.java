package laboratory.spring.krasa;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.7.3 2017-04-06T19:58:39.612+02:00 Generated source version: 2.7.3
 * 
 */
@WebServiceClient(name = "Hello", wsdlLocation = "file:/F:/workspace/_projekty/Github/krasa-jaxb-tools-example/wsdl/Hello.wsdl", targetNamespace = "http://krasa.spring.laboratory/")
public class Hello_Service extends Service {

	public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName("http://krasa.spring.laboratory/", "Hello");
	public final static QName HelloSOAP = new QName("http://krasa.spring.laboratory/", "HelloSOAP");
	static {
		URL url = null;
		try {
			url = new URL("file:/F:/workspace/_projekty/Github/krasa-jaxb-tools-example/wsdl/Hello.wsdl");
		} catch (MalformedURLException e) {
			java.util.logging.Logger.getLogger(Hello_Service.class.getName()).log(java.util.logging.Level.INFO, "Can not initialize the default wsdl from {0}",
					"file:/F:/workspace/_projekty/Github/krasa-jaxb-tools-example/wsdl/Hello.wsdl");
		}
		WSDL_LOCATION = url;
	}

	public Hello_Service(URL wsdlLocation) {
		super(wsdlLocation, SERVICE);
	}

	public Hello_Service(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public Hello_Service() {
		super(WSDL_LOCATION, SERVICE);
	}

	/**
	 *
	 * @return returns Hello
	 */
	@WebEndpoint(name = "HelloSOAP")
	public Hello getHelloSOAP() {
		return super.getPort(HelloSOAP, Hello.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default values.
	 * @return returns Hello
	 */
	@WebEndpoint(name = "HelloSOAP")
	public Hello getHelloSOAP(WebServiceFeature... features) {
		return super.getPort(HelloSOAP, Hello.class, features);
	}

}
